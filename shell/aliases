# erict@urict.net .alias file
#   should work in osx and linux
#   aliases at the top, functions at bottom

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"

### Get os name via uname ###
_myos="$(uname)"
case $_myos in
   Linux)
     alias ls="ls -F --color" ;;
   Darwin)
     alias ls="ls -F -G"
     alias gvim=mvim
     alias gvimdiff=mvimdiff
     # Open file in existing MacVim window
     alias gvim="open -a MacVim"
     # Show/hide hidden files in Finder
     alias showdotfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
     alias hidedotfiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
     # Hide/show all desktop icons (useful when presenting)
     alias showdeskicons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
     alias hidedeskicons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder" ;;
   *) ;;
esac

alias la="ls -A"
alias ll="ls -lh"
alias lal="ls -Alh"
alias dusort="du --max-depth=1 | sort -n -r"
#alias perlreplace="perl -pi -e 's/find/replace/g' *.txt"

alias more="less"
alias mroe="more"
alias rmo="rm -i *~"
alias bc="bc -l"
alias grep='grep --colour=auto'
alias ssh="ssh -XYC"
alias tmux="tmux -f ~/dotfiles/tmux/tmux.conf"
alias bi="bundle install"
alias be="bundle exec"
alias git_get_head='git rev-parse HEAD'
alias git_get_remote_head='git ls-remote upstream HEAD'
alias git_changed_tests_csv='git diff --name-only --relative upstream/master | grep tests/ | tr "\r\n" ","'
alias git=hub

alias shhcurl="curl --silent --show-error"

# move file and symlink to it from og position
function lmv(){ [ -e "$1" -a -e "$2" ] && mv "$1" "$2" && ln -s "$2/$(basename $1)" "$(dirname $1)"; }

# mkdir, cd into it
mkcd () {
  mkdir -p "$*"
  cd "$*"
}

# force mvim to create/open empty files
mvim () {
  local f
  for f; do
    test -e "$f" || touch "$f"
  done
  open -a macvim "$@"
}

# vcloud curl command one-liners
# TODO: handle exceptions from json for cases like:
#  (maint/master/refactor_acceptance_rakefile_options_files)$ curl --url http://vcloud.delivery.puppetlabs.net/vm
#  curl: (6) Couldn't resolve host 'vcloud.delivery.puppetlabs.net'
lsvm() {
  shhcurl --url http://vcloud.delivery.puppetlabs.net/vm 2> /dev/null | ruby -e 'require "json"; JSON.parse(STDIN.read).each { |vm| puts vm }'
}

my_vmpooler_token() {
  grep --extended --only-matching 'vmpooler_token: .*' ${HOME}/.fog | awk -F ' ' '{print $2}'
}

getvm() {
  shhcurl -d --url http://vcloud.delivery.puppetlabs.net/vm/$1 -H X-AUTH-TOKEN:$(my_vmpooler_token) 2> /dev/null | ruby -e 'require "json"; resp = JSON.parse(STDIN.read); puts resp[resp.keys[1]]["hostname"] + "." + resp["domain"]'
}

myvm() {
  shhcurl --url http://vcloud.delivery.puppetlabs.net/api/v1/token/$(my_vmpooler_token) 2> /dev/null
}

# get beaker log this many backwards from latest
beaker_log_dir() {
  LINE_NUM=$1
  LATEST_CONFIG=$(/bin/ls -t log/ | sed -n "${LINE_NUM}{p;q;}")
  LATEST=$(/bin/ls -t log/$LATEST_CONFIG/ | sed -n "${LINE_NUM}{p;q;}")
  echo "log/$LATEST_CONFIG/$LATEST/"
}

# TODO: use ruby to read hosts_preserved.yml and print out roles
showvm() {
  if [[ -d log/latest ]]; then
    cat log/latest/sut.log
  else # beaker-rspec doesn't provide a latest link:
    LATEST_CONFIG=$(/bin/ls -t log/ | sed -n "1{p;q;}")
    LATEST=$(/bin/ls -t log/$LATEST_CONFIG/ | sed -n "1{p;q;}")
    cat log/$LATEST_CONFIG/$LATEST/sut.log
  fi
}

HOST_PATTERN='[0-9a-z]{15}(\.delivery\.puppetlabs\.net)?'
ROLE_PATTERN='\((?!speed,).*?\)'
WIN_PATTERN='\swindows-\d\d\d\d'
# TODO: if no roles set in sut.log but only one hosts, just use that one...
#    if asking for master or database log us into the first one
sshvm() {
  HOSTNAME=`showvm | grep $1 | head -1 | ack -oh  "$HOST_PATTERN" | head -n 1`
  # find out if we're asking to login to a windows host
  USERNAME='root'
  showvm | ack -oh "$WIN_PATTERN[^\r\n]*$HOSTNAME" &>/dev/null && USERNAME='Administrator'
  echo "logging us into: $HOSTNAME as $USERNAME"
  # if the host resolves, log us in, otherwise we're asking for a role
  #   the role resolved to a hostname in HOSTNAME var above
  if ! host $1 > /dev/null 2>&1; then
    ssh -A -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa-acceptance $USERNAME@$HOSTNAME "${@:2}"
  else
    ssh -A -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa-acceptance $USERNAME@$1 "${@:2}"
  fi
}

# TODO: allow roles to be passed to this function like sshvm
rmvm() {
  shhcurl -X DELETE --url http://vcloud.delivery.puppetlabs.net/vm/$1 -H X-AUTH-TOKEN:$(my_vmpooler_token); echo""
}

# TODO: make some pretty/informative output
killvm() {
  showvm | ack -oh  "$HOST_PATTERN" | { while read i ; do shhcurl -X DELETE --url http://vcloud.delivery.puppetlabs.net/vm/$i -H X-AUTH-TOKEN:$(my_vmpooler_token); done };echo""
}
# Release all hosts from today.
#alias release-hosts="grep -oE \"[0-9a-z]{15} \(\" $PATH_TO_BEAKER/log/`date "+%Y-%m-%d*"`/pre_suite-run.log | grep -oE \"[0-9a-z]{15}\" | sort | uniq | xargs -L 1 -I some_vm curl -v -X DELETE --url vcloud/vm/some_vm"

# ${var^} doesn't work in bash < 4, default in osx :-(
first_char_toupper() {
first=`echo $1 | cut -c1 | tr [a-z] [A-Z]`
second=`echo $1 | cut -c2-`
echo $first$second
}

# get latest agent sha given component branch name
get_latest_sha() {
  if [ $# -lt 1 ]; then
    echo "get_latest_sha <project> branch"
    echo "where branch is one of manual, master, stable, or aardwolf"
    echo "where project is optional and is one of puppet, hiera, facter, puppet_agent_daily, or mco"
    return 1
  fi
  if [ $# -gt 1 ]; then
    BRANCH_NAME=$2
    PROJECT_NAME=$1
  else
    PROJECT_NAME='puppet'
    BRANCH_NAME=$1
  fi
  #https://jenkins.puppetlabs.com/view/puppet-agent/view/stable/view/puppet/job/platform_puppet_pkg-van-promote_stable/lastSuccessfulBuild/
  JENKINS_URL='jenkins.puppetlabs.com/view/puppet-agent/view'
  shhcurl --url https://${JENKINS_URL}/${BRANCH_NAME}/view/${PROJECT_NAME}/job/platform_puppet_pkg-van-promote_${BRANCH_NAME}/lastSuccessfulBuild/api/json | ruby -e 'require "json"; puts JSON.parse(STDIN.read)["actions"][0]["parameters"].find{|x| x["name"] == "SUITE_COMMIT"}["value"]'
}

get_latest_version() {
  if [ $# -lt 1 ]; then
    echo "get_latest_version <project> branch"
    echo "where branch is one of manual, master, stable, or aardwolf"
    echo "where project is optional and is one of puppet, hiera, facter, puppet_agent_daily, or mco"
    return 1
  fi
  if [ $# -gt 1 ]; then
    BRANCH_NAME=$2
    PROJECT_NAME=$1
  else
    PROJECT_NAME='puppet'
    BRANCH_NAME=$1
  fi
  #https://jenkins.puppetlabs.com/view/puppet-agent/view/stable/view/puppet/job/platform_puppet_pkg-van-promote_stable/lastSuccessfulBuild/
  JENKINS_URL='jenkins.puppetlabs.com/view/puppet-agent/view'
  shhcurl --url https://${JENKINS_URL}/${BRANCH_NAME}/view/${PROJECT_NAME}/job/platform_puppet_pkg-van-promote_${BRANCH_NAME}/lastSuccessfulBuild/api/json | ruby -e 'require "json"; puts JSON.parse(STDIN.read)["actions"][0]["parameters"].find{|x| x["name"] == "SUITE_VERSION"}["value"]'
}

get_latest_shas() {
  if [ $# -gt 1 ]; then
    BRANCH_NAME=$2
    PROJECT_NAME=$1
  elif [ $# -gt 0 ] && [ $# -lt 2 ]; then
    PROJECT_NAME='puppet-agent'
    BRANCH_NAME=$1
  else
    PROJECT_NAME='puppet-agent'
    BRANCH_NAME='master'
  fi
  shhcurl --url https://github.com/puppetlabs/${PROJECT_NAME}/commits/${BRANCH_NAME} | grep sha | grep -oE '[0-9a-z]{40}'
}
