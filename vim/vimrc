call pathogen#infect()
call pathogen#helptags()

" map wq to w because i fat finger it ALL. THE. TIME.
" use the slightly slower :w :q
cnoreabbr <expr> wq
      \ ((getcmdtype() == ':' && getcmdpos() <= 3)?
      \ 'w' : 'wq')

let mapleader=","  " change <leader> to , from \
" turn off old bugs/limits
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
set omnifunc=syntaxcomplete#Complete

" don't care about modula2; set all *.md as markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd Filetype markdown setlocal spell

" moar ruby
autocmd BufRead,BufNewFile Rakefile,Gemfile,Vagrantfile,*.gemspec set filetype=ruby
" macro @p inserts a pry breakpoint
let @p = "0Orequire 'pry'; binding.pry="
" Set up puppet manifest and spec options
autocmd BufNewFile,BufReadPost *.pp set filetype=puppet
" turn on spelling for commit messages
autocmd FileType *commit* setlocal spell

" disable arrow keys in escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "Dispatch rspec {spec}"

set wildmode=list:longest   "make cmdline tab completion similar to bash
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing

" no more shift!
nnoremap ; :
" make Y yank to end of line!  duh
map Y y$

" setup the omnicomplete function, using supertab and tab key
" complete lists generated from buffers, and tags
set complete=".,b,u,]"
set completeopt=longest,menuone
autocmd FileType ruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby let g:rubycomplete_buffer_loading=1
autocmd FileType ruby let g:rubycomplete_classes_in_global=1
autocmd FileType yaml setlocal ts=4 sts=4 sw=4 expandtab
" Move up and down in autocomplete with <c-j> and <c-k>
inoremap <expr> <c-j> ("\<C-n>")
inoremap <expr> <c-k> ("\<C-p>")

" speling
set spelllang=en_us
nmap <silent> <leader>s :set spell!<CR>

" syntastic syntax checking
let g:syntastic_ruby_checkers        = ['rubocop']
let g:syntastic_javascript_checkers  = ['jshint']
let g:syntastic_check_on_wq          = 0  " don't check on quit
let g:syntastic_error_symbol         = "âœ˜"
let g:syntastic_style_error_symbol   = "sâœ˜"
let g:syntastic_warning_symbol       = "âš "
let g:syntastic_style_warning_symbol = "sâš "

" theme
set background=dark
let g:solarized_termtrans  = 1
let g:solarized_termcolors = 256
colorscheme solarized

" Show PASTE if in paste mode
let g:airline_detect_paste=1
" glyphs for statusbar to be like powerline >
let g:airline_powerline_fonts = 1
" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized'
" show git changes
let g:airline#extensions#hunks#enabled = 1
" define the set of text to display for each mode.
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ }

" turn off filename/bufferline in statusbar, it's in the tab bar above, but
" not whole path
" let g:airline_section_c = ''
" display a warning if fileformat isnt unix
" FIXME: this doesn't quite work
"let g:airline_section_y="%#warningmsg# %{&ff!='unix'?'['.&ff.']':''} %*"
""display a warning if file encoding isnt utf-8
"let g:airline_section_y+=%#warningmsg#
"let g:airline_section_y+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
"let g:airline_section_y+=%*
let g:airline_section_y=''

" Shortcut to rapidly toggle `set list` to show hidden chars
nmap <leader>l :set list!<CR>

"Hide abandon buffers in order to not lose undo history.
"hides buffers instead of closing them
set hidden
set noerrorbells " No noise.
set mousehide    " hide mouse after typing
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set transparency=15
    set guifont=Menlo\ Regular:h10
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif
" erase previously entered chars, autoindent and newlines
set backspace=indent,eol,start
"set smarttab
"set smartindent
"set indentexpr
set tabstop=2
set shiftwidth=2
set expandtab
" show matching brace/paren
set showmatch
" show column 80
set colorcolumn=80

" autotab/indent stuff
set autoindent

"" Enable folding based on syntax rules
set foldmethod=syntax
" default to unfolded (99 levels)
set foldlevelstart=99
"" Adjust the fold highlighting
highlight Folded guibg=grey guifg=blue
"" Map folding to Spacebar
nnoremap <Space> za

"navigation between splits; ctrl-j, k, l, h (just like home row navigation keys)
" this is being done in tmux with vim-tmux-navigator
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>
" open split to right and bottom
set splitbelow
set splitright

"----- xolox/vim-easytags settings -----
" Where to look for tags files
set tags=./.git/tags
set tags+=~/.vim/tags
set tags+=~/projects/beaker/.git/tags
" Sensible defaults
"let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>

" map F2 key to paste-mode toggle and set status
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" ii to exit insert mode
:imap ii <Esc>

" always show statusbar
set laststatus=2
" show linenumbers on left
set number
" start searching before enter
set incsearch
set ignorecase " case insensitive search.  affects matching
set smartcase " use case sensitive when caps used
set hlsearch  " highlight search
nnoremap <silent> <leader>/ :nohlsearch<CR> " clear search highlights

" vimdiff settings
" fill in space btwn lines to align buffers:
set diffopt=filler
" ignore whitespace
set diffopt+=iwhite

" setup hilight colorscheme for whitespace
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+\%#\@<!$/

" StripTrailingWhitespaces and hotkey
" from: Drew Neil (@nelstrom)
nnoremap <silent> <F6> :call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

set noautochdir " force macvim to not set working dir to current file
" ,cd to chdir to the path of the current file, then pwd
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" search current dir with :ag
if executable('ag') " The Silver Searcher
  " Use ag over grep
  " Note we extract the column as well as the file and line number
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
  set grepformat=%f:%l:%c%m
  " set :ag to grep, but silent; open cwindow
  " lame, must start with caps
  " search files, open quicksearch, redraw
  command! -nargs=+ -complete=file_in_path -bar Ag call setqflist([]) | silent grep! <args>|cwindow|redraw!
endif
" search open buffers with :Bag blah
" search across buffers, close the bufdo opened windows, open quicksearch, redraw
command! -nargs=+ -bar Bag call setqflist([]) | silent bufdo vimgrepadd! <args> % |only|cwindow|redraw!

" cursor shape based on mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  "let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
elseif $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
