call pathogen#infect()
call pathogen#helptags()

" map wq to w because i fat finger it ALL. THE. TIME.
" use the slightly slower :w :q
cnoreabbr <expr> wq
      \ ((getcmdtype() == ':' && getcmdpos() <= 3)?
      \ 'w' : 'wq')

let mapleader=","  " change <leader> to , from \
" turn off old bugs/limits
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins"

" don't care about modula2; set all *.md as markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md setlocal spell
" moar ruby
autocmd BufRead,BufNewFile Rakefile,Gemfile,Vagrantfile,*.gemspec set filetype=ruby
" Set up puppet manifest and spec options
autocmd BufNewFile,BufReadPost *.pp set filetype=puppet
" turn on spelling for git commit messages
autocmd FileType gitcommit setlocal spell

" disable arrow keys in escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" no more shift!
nnoremap ; :
" make Y yank to end of line!  duh
map Y y$

" setup the omnicomplete function, using supertab and tab key
" complete lists generated from buffers, and tags
set complete=".,b,u,]"
set completeopt=longest,menuone
"let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
"autocmd FileType ruby let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
autocmd FileType ruby let g:SuperTabDefaultCompletionType = "context"
"autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd Filetype ruby setlocal omnifunc=rubycomplete#Complete
" Move up and down in autocomplete with <c-j> and <c-k>
inoremap <expr> <c-j> ("\<C-n>")
inoremap <expr> <c-k> ("\<C-p>")

"if has("autocmd") && exists("+omnifunc")
  "autocmd Filetype *
        "\ if &omnifunc == "" |
        "\   setlocal omnifunc=syntaxcomplete#Complete |
        "\ endif
"endif

let @p = "0Orequire 'pry'; binding.pry="

" speling
set spelllang=en_us
nmap <silent> <leader>s :set spell!<CR>

" syntastic syntax checking
let g:syntastic_ruby_checkers          = ['rubocop']
"let g:syntastic_ruby_checkers          = ['rubocop', 'mri']
"let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq = 0  " don't check on quit
"let g:syntastic_enable_signs=1
let g:syntastic_error_symbol = "âœ—"
let g:syntastic_style_error_symbol = "sâœ—"
let g:syntastic_warning_symbol = "âš "
let g:syntastic_style_warning_symbol = "sâš "
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" theme
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
colorscheme solarized

" Shortcut to rapidly toggle `set list` to show hidden chars
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
" i use highlighting instead, below
"set listchars=tab:â–¸\ ,eol:Â¬"

"Hide abandon buffers in order to not lose undo history.
"hides buffers instead of closing them
set hidden
" autosave buffers when switching buffers
"set autowrite
" use w!! if you forgot to sudo before opening a file.  dangerous?
cmap w!! w !sudo tee % >/dev/null
set noerrorbells " No noise.
set mousehide " hide mouse after typing
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set transparency=15
    set guifont=Menlo\ Regular:h10
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif
" erase previously entered chars, autoindent and newlines
set backspace=indent,eol,start
"set smarttab
"set smartindent
"set indentexpr
set tabstop=2
set shiftwidth=2
set expandtab
" show matching brace/paren
set showmatch
" show column 80
set colorcolumn=80

" autotab/indent stuff
set autoindent

"" Enable folding based on syntax rules
set foldmethod=syntax
" default to unfolded (99 levels)
set foldlevelstart=99
"" Adjust the fold highlighting
highlight Folded guibg=grey guifg=blue
"" Map folding to Spacebar
nnoremap <Space> za

"navigation between splits; ctrl-j, k, l, h (just like home row navigation keys)
" this is being done in tmux with vim-tmux-navigator
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>
" open split to right and bottom
set splitbelow
set splitright

set tags+=./tags,tags;
set tags+=~/repos/er0ck/*/.git/tags

" map F2 key to paste-mode toggle and set status
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" ii to exit insert mode
:imap ii <Esc>

" dont use Q for Ex mode
"map Q :q
"map q :q

" show line nums, etc
"set ruler
" always show statusbar
set laststatus=2
set statusline+=%<%f\ %h%m%r\ %y%=%{v:register}\ %-14.(%l,%c%V%)\ %P
" show linenumbers on left
set number
" start searching before enter
set incsearch
set ignorecase " case insensitive search.  affects matching
set smartcase " use case sensitive when caps used
set hlsearch  " highlight search
nmap <silent> ,/ :nohlsearch<CR> " clear search highlights
" alt left and right for buffer up/dn
:nmap <M-left> :bprev<CR>
:nmap <M-right> :bnext<CR>

" vimdiff settings
" fill in space btwn lines to align buffers:
set diffopt=filler
" ignore whitespace
set diffopt+=iwhite
map <C-n> :NERDTreeToggle<CR> " ctrl-n for nerdtree

" setup hilight colorscheme for whitespace
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
"autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
"match ExtraWhitespace /\s\+$/  " Show trailing whitespace
match ExtraWhitespace /\s\+\%#\@<!$/
"match ExtraWhitespace /\t/  " Show tabs

" StripTrailingWhitespaces and hotkey
" from: Drew Neil (@nelstrom)
nnoremap <silent> <F6> :call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

set noautochdir " force macvim to not set working dir to current file
" ,cd to chdir to the path of the current file, then pwd
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" cursor shape based on mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  "let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
elseif $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
